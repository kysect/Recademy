@page "/uploadProject"
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage
@using Recademy.Dto
@using Recademy.Services.Abstraction

@inject IGithubService GithubService
@inject ITagService TagService
@inject IUserService UserService
@inject LocalStorage Storage

<style>
    .form-line {
        margin: 10px 0px;
    }

    .form {
        margin-top: 20px;
    }
    .accept {
        margin-top: 35px;
    }
</style>

<div class="container">
    <div class="mat-h3">Upload project</div>
    <div class="container form">

        <div class="row align-items-center form-line">
            <div class="text-label col-md-3">Select title</div>
            <MatTextField @bind-Value="@_projectTitle" Label="Title" Outlined="true" class="col-md-5 offset-md-1"></MatTextField>
        </div>

        <div class="row align-items-center form-line">
            <div class="text-label col-md-3">Select repository</div>
            <div class="col-md-5 offset-md-1">
                <MatAutocomplete Collection="@_repositories" FullWidth="true" ItemType="GhRepositoryDto" Label="Pick repository" @bind-Value="@_selectedRepository"></MatAutocomplete>
            </div>
        </div>

        <div class="row align-items-center form-line">
            <div class="text-label col-md-3">Add tag</div>
            <div class="col-md-5 offset-md-1">
                <MatAutocomplete Collection="@_tags" FullWidth="true" ItemType="string" Label="Pick tag" @bind-Value="@_selectedTag"></MatAutocomplete>
            </div>
        </div>
        <div class="row form-line accept">
            <div class="col-md-3 offset-md-6">
                <MatButton Raised="true" Icon="done" OnClick="Click">@_buttonText</MatButton>
            </div>
        </div>
    </div>
        
</div>

@code {

    public int Id { get; set; }
    protected override void OnInitialized()
    {
        //Id = !int.TryParse(Storage.GetItemAsync("storageKey").Result ?? string.Empty, out int id) ? 1 : id;
        _repositories = GithubService.GhGetRepositories(1);
        _tags = TagService.GetAllTags();
    }

    private void Click()
    {
        if (string.IsNullOrEmpty(_projectTitle))
            _buttonText = "Nope";
        else
        {
            _buttonText = "Project added";
            UserService.AddProject(new AddProjectDto(_projectTitle, 1, _selectedRepository.RepositoryUrl, _selectedTag));
        }
    }

    private List<GhRepositoryDto> _repositories;
    private List<string> _tags;

    private GhRepositoryDto _selectedRepository;
    private string _selectedTag;
    private string _projectTitle { get; set; }
    private string _buttonText { get; set; } = "Add";
}
