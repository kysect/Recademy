@page "/Review/{requestId:int}"
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage
@using Recademy.Dto
@using Recademy.Services.Abstraction
@inject IReviewService ReviewService
@inject IProjectService ProjectService
@inject LocalStorage Storage
@inject IGithubService GithubService

<style>
    .form {
        margin-top: 40px;
    }

    .buttons {
        margin-top: 25px;
    }
</style>

<div class="mat-h3">Review for @project.Title<span>#@project.Id</span></div>
<div class="container form">
    <div class="row">
        <div class="col-md-10">
            <MatTextField @bind-Value="@textArea" FullWidth="true" Label="Your review" TextArea="true"></MatTextField>
        </div>
    </div>
    <div class="row buttons">
        <div class="col-md-3">
            <MatButton Link="@project.Link">
                <i class="fa fa-github" aria-hidden="true"></i> &nbsp; Github
            </MatButton>
        </div>
        <div class="col-md-3">
            <MatButton Outlined="true" Icon="send" OnClick="@Click">@buttonMessage</MatButton>
        </div>
    </div>
</div>
@code
{
    public string textArea = "";

    string buttonMessage = "Send review";

    public int Id { get; set; }

    protected override void OnInitialized()
    {
        project = ReviewService.GetReviewInfo(requestId);

        //Id = !int.TryParse(Storage.GetItemAsync("storageKey").Result, out int id) ? 1 : id;
    }

    ReviewProjectDto project;

    void Click()
    {
        if (textArea == "")
            buttonMessage = "Nope";
        else
        {
            GithubService.CreateIssues(project.Link, textArea);
            ReviewService.SendReviewResponse(new SendReviewRequestDto(requestId, textArea));
            buttonMessage = "Review sent";
        }
    }
    [Parameter]
    public int requestId { get; set; }
}
