@page "/projects/{ProjectId:int}"
@using Recademy.Dto.Projects
@using Recademy.Dto.Reviews
@using Recademy.Dto.Enums
@inject HttpClient Http

@if (MainLayout.User is null)
{
    <Unauthorized />
}
else
{
    @if (@_project is not null)
    {
        <div style="margin: 1em;">
            <h1>@_project?.Title</h1>

            <BSLabel style="font-weight: bold">Описание проекта</BSLabel>
            <p>@_project?.Description</p>
            <p><b>Автор: </b>@_project.Username</p>
            <BSLink><b>Ссылка: </b><a href="@_project.Link">@_project.Link</a></BSLink>
        </div>
    }

    @if (_reviewResponses is not null)
    {
        <div style="margin: 1em;">
            <h5>Оценки</h5>

            <div style="display: flex; flex-direction: row; flex-flow: row">
                @foreach (var response in _reviewResponses)
                {
                    <div style="display: flex;
                                flex-direction: column;
                                justify-content: space-between;
                                align-items: baseline;
                                padding: 0.5em 1em;
                                background-color: white;
                                border-radius: 12px;
                                box-shadow: 5px 5px lightgray">
                        <p style="margin: 0;"><b>Оценка:</b> @response.ReviewConclusion.TranslateToString()</p>
                        <p style="margin: 0;"><b>Комментарий:</b>: @response.Description</p>
                    </div>
            
                }
            </div>
        </div>
    }
}

@code {
    private ProjectInfoDto _project;
    private IReadOnlyCollection<ReviewResponseInfoDto> _reviewResponses = new List<ReviewResponseInfoDto>();

    [Parameter]
    public int ProjectId { get; init; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var project = await Http.GetFromJsonAsync<ProjectInfoDto>($"api/Projects/{ProjectId}");

            if (project is not null)
                _project = project;

            var reviewResponses = await Http.GetFromJsonAsync<IReadOnlyCollection<ReviewResponseInfoDto>>($"api/reviews/responses/{ProjectId}");

            if (reviewResponses is not null) 
                _reviewResponses = reviewResponses;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}
