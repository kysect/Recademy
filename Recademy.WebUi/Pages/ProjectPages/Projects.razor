@page "/projects"
@using Recademy.Dto.Projects
@inject HttpClient Http

<BSNavbar Color="BSColor.Light">
    <BSContainer Container="Container.Fluid">
        <BSNavbarBrand>Проекты</BSNavbarBrand>
        <BSCollapse IsInNavbar="true">
            <Toggler>
                <BSNavbarToggle />
            </Toggler>
            <Content>
                <BSNav MarginEnd="Margins.Auto" MarginBottom="Margins.Small" Class="mb-lg-0">
                    <BSNavItem Url="/projects/reviews/requests">Просмотреть запросы на ревью</BSNavItem>
                </BSNav>
            </Content>
        </BSCollapse>
    </BSContainer>
</BSNavbar>

@if (_userProjects.Count > 0)
{
    <BSTable Color="BSColor.Light" IsBordered="true" IsBorderLess="false" IsCaptionTop="false" IsStriped="false">
        <BSTHead>
            <BSTR>
                <BSTD>ID</BSTD>
                <BSTD>Название</BSTD>
                <BSTD>Ссылка</BSTD>
                <BSTD>Автор</BSTD>
                <BSTD>Теги</BSTD>
                <BSTD></BSTD>
            </BSTR>
        </BSTHead>
        <BSTBody>
            @foreach (ProjectInfoDto project in _userProjects)
            {
                <BSTR>
                        <BSTD>@project.ProjectId</BSTD>
                        <BSTD>@project.ProjectName</BSTD>
                    <BSTD>@project.ProjectUrl</BSTD>
                        <!-- Make userId mapping to user -->
                        <BSTD>@project.UserId</BSTD>
                        <BSTD>@string.Join(", ", @project.ProjectSkills.Select(skill => skill.Skill?.Name))</BSTD>
                    <BSTD>
                        <BSButton Color="BSColor.Primary">
                            Запросить ревью
                        </BSButton>
                    </BSTD>
                </BSTR>
            }
        </BSTBody>
    </BSTable>
}
else
{
    <div>
        <p>У тебя ещё нет проектов :c</p>
        <BSImage Source="images/white-white-cat.gif" IsFluid="true"></BSImage>
    </div>
}

@code {
    private IReadOnlyCollection<ProjectInfoDto> _userProjects = new List<ProjectInfoDto>();

    protected override async Task OnInitializedAsync()
    {
        if (MainLayout.User is null)
            return;

        try
        {
            var userProjects = await Http.GetFromJsonAsync<IReadOnlyCollection<ProjectInfoDto>>($"api/Projects/users/{MainLayout.User.Id}");

            if (userProjects is not null)
                _userProjects = userProjects;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
