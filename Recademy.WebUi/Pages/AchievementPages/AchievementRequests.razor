@page "/achievements/requests"
@using Recademy.Dto.Achievements
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (MainLayout.User is null)
{
    <Unauthorized />
}
else
{
    <h3>Запросы на получение достижений</h3>
    
    // TODO: switch to .NET 7 to use [..]
    @if (_requests is not null && !_requests.Any())
    {
        <p>Запросы на получение достижений отсуствуют</p>
    }
    else
    {
        @if (_requests is not null)
        {
            
            @foreach (UserAchievementRequestDto request in _requests)
            {
                <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: baseline; padding: 1em; background-color: white; border-radius: 12px; box-shadow: 5px 5px lightgray;">
                    <p style="margin: 0"><b>@request.Achievement.Title</b></p>
                    <p style="margin: 0">@request.User.GithubUsername</p> @request.Reason
                    <button style="padding: 2px 10px; background-color: slateblue; color: white; border: 0; border-radius: 12px;" @onclick="@(() => Reply(@request.RequestId))">
                        Ответить
                    </button>
                </div>
            }
        }
    }
}

@code {
    private const string ResponsePageUri = "/achievements/requests/{0}/response";
    private IReadOnlyCollection<UserAchievementRequestDto> _requests;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<IReadOnlyCollection<UserAchievementRequestDto>>("api/achievements/users/requests");

        _requests = response ?? new List<UserAchievementRequestDto>();
    }

    private void Reply(int requestId) => NavigationManager.NavigateTo(String.Format(ResponsePageUri, requestId));
}
