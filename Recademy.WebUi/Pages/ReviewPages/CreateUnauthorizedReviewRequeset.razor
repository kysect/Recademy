@page "/reviews"
@using Recademy.Dto.Projects
@using Recademy.Dto.Reviews
@using Newtonsoft.Json
@inject HttpClient Http
@inject IBlazorStrap BlazorStrap

<BSToaster />

<h3>Запрос на ревью</h3>

    <BSLabel MarginTop="Margins.Small">Название проекта</BSLabel>
    <BSInput InputType="InputType.Text" @bind-Value="_projectTitle" />

    <BSLabel MarginTop="Margins.Small">Описание проекта</BSLabel>
    <BSInput InputType="InputType.Text" @bind-Value="_projectDescription" />
    
    <BSLabel MarginTop="Margins.Small">Ссылка на проект</BSLabel>
    <BSInput InputType="InputType.Text" @bind-Value="_projectLink" />

    <BSLabel MarginTop="Margins.Small">Комментарий</BSLabel>
    <BSInput InputType="InputType.Text" @bind-Value="_comment" />

    <BSButton Color="BSColor.Primary" @onclick="SendReviewRequest" MarginTopAndBottom="Margins.Medium">Отправить запрос</BSButton>

@code {
    private string _comment;
    private string _projectTitle;
    private string _projectDescription;
    private string _projectLink;

    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;
    }

    private async Task SendReviewRequest()
    {
        //Create project with default userId (I assume we add it beforehand)
        var createProjectRequest = new CreateProjectDto
        (
            AuthorId: 1, 
            Title: _projectTitle, 
            Description: _projectDescription, 
            Link: _projectLink, 
            new List<string>()
        );
        
        var createProjectRequestResponse = await Http.PostAsJsonAsync($"api/projects", createProjectRequest);

        if (createProjectRequestResponse.IsSuccessStatusCode)
        {
            BlazorStrap.Toaster.Add($"Проект {createProjectRequest.Title} успешно добавлен", o =>
            {
                o.Color = BSColor.Success;
                o.CloseAfter = 3000;
                o.Toast = Toast.BottomRight;
            });
            
            var newProject = await createProjectRequestResponse.Content.ReadAsStringAsync();
            ProjectInfoDto projectInfoDto = JsonConvert.DeserializeObject<ProjectInfoDto>(newProject);
        
            // TODO: add validation on input
            var request = new CreateReviewRequestDto
            {
                UserId = projectInfoDto.UserId,
                ProjectId = projectInfoDto.ProjectId,
                Comment = _comment,
            };

            var response = await Http.PostAsJsonAsync($"api/reviews/requests", request);

            if (response.IsSuccessStatusCode)
            {
                BlazorStrap.Toaster.Add("Запрос на ревью успешно создан", o =>
                {
                    o.Color = BSColor.Success;
                    o.CloseAfter = 3000;
                    o.Toast = Toast.BottomRight;
                });
            }
            else
            {
                // TODO: show more suitable error (for example that review was already requested)
                BlazorStrap.Toaster.Add("Произошла ошибка при отправке запроса на ревью", o =>
                {
                    o.Color = BSColor.Danger;
                    o.CloseAfter = 3000;
                    o.Toast = Toast.BottomRight;
                });
            }
        }
        else
        {
            BlazorStrap.Toaster.Add("Произошла ошибка при добавлении проекта", o =>
            {
                o.Color = BSColor.Danger;
                o.CloseAfter = 3000;
                o.Toast = Toast.BottomRight;
            });
        }

        _projectTitle = default;
        _projectDescription = default;
        _projectLink = default;
        _comment = default;
    }
}