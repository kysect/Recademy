@page "/projects/reviews/requests"
@using Recademy.Dto.Reviews
@using Recademy.Common
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (MainLayout.User is null)
{
    <Unauthorized />
}
else
{
    <h3>Запросы на ревью</h3>

    <!-- TODO: is not null or empty -->
    @if (_reviewRequests is not null)
    {
        <BSTable Color="BSColor.Light" IsBordered="true" IsBorderLess="false" IsCaptionTop="false" IsStriped="false">
            <BSTHead>
                <BSTR>
                    <BSTD>ID</BSTD>
                    <BSTD>Проект</BSTD>
                    <BSTD>Пользователь</BSTD>
                    <BSTD>Дата отправки</BSTD>
                    <BSTD>Состояние</BSTD>
                    <BSTD></BSTD>
                </BSTR>
            </BSTHead>
            <BSTBody>
                @foreach (ReviewRequestInfoDto request in _reviewRequests)
                {
                    <BSTR>
                        <BSTD>@request.Id</BSTD>
                        <BSTD>@request.ProjectInfo?.Title</BSTD>
                        <BSTD>@request.Username</BSTD>
                        <BSTD>@request.CreationDate</BSTD>
                        <!-- TODO: transalte into russian -->
                        <BSTD>@request.State</BSTD>
                        @if (MainLayout.User?.HasMentorRights() ?? false)
                        {
                            <BSButton Color="BSColor.Primary" MarginTopAndBottom="Margins.ExtraSmall" Size="Size.Small" @onclick="() => OpenReviewResponsePage(request.Id)">
                                Оценить
                            </BSButton>
                        }
                    </BSTR>
                }
            </BSTBody>
        </BSTable>
    }
}

@code {
    private IReadOnlyCollection<ReviewRequestInfoDto> _reviewRequests = new List<ReviewRequestInfoDto>();

    protected override async Task OnInitializedAsync()
    {
        if (MainLayout.User is null)
            return;

        var reviewRequests = await Http.GetFromJsonAsync<IReadOnlyCollection<ReviewRequestInfoDto>>("api/reviews/requests/user");

        if (reviewRequests is not null)
        {
            _reviewRequests = reviewRequests;
        }
    }

    private void OpenReviewResponsePage(int requestId)
    {
        NavigationManager.NavigateTo($"/projects/reviews/responses/create/{requestId}");
    }
}