@page "/achievements"
@using Recademy.Dto.Achievements
@using Recademy.Common
@using Recademy.WebUi.Pages.AchievementPages
@inject HttpClient Http

@if (MainLayout.User is null)
{
    <Unauthorized /> 
}
else
{
    <BSProgress>
        <BSProgressBar Color="BSColor.Primary" Value="@CalculateUserPointsPercent()" >@(Math.Round(@CalculateUserPointsPercent()))%</BSProgressBar>
    </BSProgress>

    <div style="display: flex; flex-direction: row; justify-content: center; padding: 1em;">
        <BSImage Source="../images/crown.svg" IsFluid="true" style="max-height: 1.5em" />
        <BSLabel PaddingLeftAndRight="Padding.Small">
            Kysочков у <BSLabel style="color:slateblue; font-weight: bold">@MainLayout.User.GithubUsername</BSLabel>: @_userPointsCount
        </BSLabel>
        <BSImage Source="../images/crown.svg" IsFluid="true" style="max-height: 1.5em" />
    </div>
    

    <BSNavbar Color="BSColor.Light">
        <BSContainer Container="Container.Fluid">
            <BSCollapse IsInNavbar="true">
                <Toggler>
                    <BSNavbarToggle />
                </Toggler>
                <Content>
                    <BSNav MarginEnd="Margins.Auto" MarginBottom="Margins.Small" Class="mb-lg-0">
                        <BSNavItem OnClick="() => _allAchievementsShow = false" style="font-weight: bold">Достижения</BSNavItem>
                        <BSNavItem OnClick="() => _allAchievementsShow = true">Все достижения</BSNavItem>
                        <BSNavItem Url="/achievements/request">Запросить достижение</BSNavItem>
                        @if (MainLayout.User.HasMentorRights())
                        {
                            <BSNavItem Url="/achievements/requests">Просмотреть запросы</BSNavItem>
                        }
                    </BSNav>
                </Content>
            </BSCollapse>
        </BSContainer>
    </BSNavbar>


    @if (!_allAchievementsShow)
    {
        <UserAchievementsList UserAchievements="@_userAchievements"/>
    }
    else
    {
        <AllUserAchievementsList AllUserAchievements="@_allUserAchievements"/>
    }
}

@code {
    private IReadOnlyCollection<UserAchievementDto> _allUserAchievements = new List<UserAchievementDto>();
    private IReadOnlyCollection<UserAchievementDto> _userAchievements = new List<UserAchievementDto>();
    private int _userPointsCount;
    private bool _allAchievementsShow;

    protected override async Task OnInitializedAsync()
    {
        if (MainLayout.User is null)
            return;

        var userAchievements = await Http.GetFromJsonAsync<IReadOnlyCollection<UserAchievementDto>>($"api/achievements/users/{MainLayout.User.Id}");

        if (userAchievements is not null)
        {
            _userAchievements = userAchievements;
        }

        var userPoints = await Http.GetFromJsonAsync<int>($"api/achievements/users/{MainLayout.User.Id}/points");

        _userPointsCount = userPoints;

        var response = await Http.GetFromJsonAsync<IReadOnlyCollection<UserAchievementDto>>("api/achievements/users");

        if (response is not null)
        {
            _allUserAchievements = response;
        }
    }

    private double CalculateUserPointsPercent()
    {
        if (_allUserAchievements is null)
            return 0;

        if (_userAchievements is null)
            return 0;

        int totalPoints = _allUserAchievements.Sum(achievement => achievement.Points);
        int userPoints = _userAchievements.Sum(achievement => achievement.Points);

        return userPoints * 100.0 / totalPoints;
    }
}