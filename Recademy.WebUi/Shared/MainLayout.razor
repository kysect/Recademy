@using Recademy.Dto.Users
@using Recademy.Dto.Roles
@using Recademy.Dto.Enums
@inherits LayoutComponentBase
@inject ILogger<MainLayout> Logger
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IBlazorStrap BlazorStrap

<BSToaster />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: baseline; padding: 1em 1em">
            @if (User is null)
            {
                <div>
                    <button style="position: absolute; right: 1em" @onclick="SignIn">Войти</button>
                </div>
            }
            else
            {
                <div>
                    <button @onclick="MakeUserAdmin">Получить админку!</button>
                </div>
                @if (!string.IsNullOrEmpty(@UserRole?.Name))
                {
                    <div>
                        [@UserRole.Name] @User.GithubUsername
                        <button @onclick="SignOut">Выйти</button>
                    </div>
                }
                else
                {
                    <div>
                        @User.GithubUsername
                        <button @onclick="SignOut">Выйти</button>
                    </div>
                }
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>


@code {
    public static UserInfoDto User { get; private set; }
    public static UserRoleDto UserRole { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            User = await Http.GetFromJsonAsync<UserInfoDto>("api/auth/user/current");

            if (User is not null)
                UserRole = await Http.GetFromJsonAsync<UserRoleDto>($"api/roles/users/{User.Id}");
        }
        catch (HttpRequestException httpException)
        {
            Logger.LogError($"Server returned error response with status code {httpException.StatusCode}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"An error occurred while initializing page");
        }
    }

    private async void SignIn()
    {
        NavigationManager.NavigateTo("api/auth/sign-in", forceLoad: true);

        try
        {
            User = await Http.GetFromJsonAsync<UserInfoDto>("api/auth/github");

            if (User is not null)
                UserRole = await Http.GetFromJsonAsync<UserRoleDto>($"api/roles/users/{User.Id}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"An error occurred while signing in user");
        }
    }

    private void SignOut()
    {
        NavigationManager.NavigateTo("api/auth/sign-out", forceLoad: true);

        User = null;
        UserRole = null;
    }

    private async void MakeUserAdmin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"api/users/{User.Id}/permissions", UserTypeDto.Admin);

            User = await Http.GetFromJsonAsync<UserInfoDto>("api/auth/user/current");

            // TODO (annchous): reduce copypaste
            if (response.IsSuccessStatusCode)
            {
                BlazorStrap.Toaster.Add($"Права доступа у пользователя {User.GithubUsername} успешно изменены на {User.UserType}", o =>
                {
                    o.Color = BSColor.Success;
                    o.CloseAfter = 3000;
                    o.Toast = Toast.BottomRight;
                });
            }
            else
            {
                BlazorStrap.Toaster.Add("Произошла ошибка при отправке запроса на изменение прав доступа", o =>
                {
                    o.Color = BSColor.Danger;
                    o.CloseAfter = 3000;
                    o.Toast = Toast.BottomRight;
                });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"An error occurred while updating user permissions");
        }
    }
}